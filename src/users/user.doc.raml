displayName: Users
description: |
  Users (or "members") are considered registrated and authenticated users.
post:
  is: [ validated ]
  description: |
    Register a new user.

    New users post their username, email and password to this resource and
    receive their profile in return.
  body:
    role/anon:
      schema: user-register
      example: !include ../../doc/api/v1/users/http/post-req.json
  responses:
    201:
      body:
        role/anon:
          schema: user
          example: !include ../../doc/api/v1/users/http/post-res-201.json
    422:
      body:
        role/anon:
          example: !include ../../doc/api/v1/users/http/post-res-422.json
put:
  is: [ protected]
  description: |
    Updates or creates a new user.

    This is a service-only resource, meaning it's only accessible with a
    provider token of a registered provider. The goal is for a provider site to
    be able to create new users.
get:
  is: [ protected ]
  securedBy: [ jwt: { scopes: [ ADMIN, MEMBER ] } ]
  description: |
    List all users.

    Note that only administrators can really *list* all users, anonymous users
    must provide a search query and will get limited user info (see response
    examples).
  queryParameters:
    q:
      description: |
        Search query. Searches in *username* and *name*.

         - Members must provide at least three characters.
         - As administrator, it additionally searches email addresses. Also,
           there is no minimal query length.
      required: false
      minLength: 3
      type: string
      example: freez
    name:
      description: Exact match by username.
      required: false
      minLength: 3
      type: string
      example: freezy
  body:
    role/admin:
      example: !include ../../doc/api/v1/users/http/list-req.json
    role/member-Search-for-User:
      example: !include ../../doc/api/v1/users/http/search-as-member-req.json
  responses:
    200:
      body:
        role/admin:
          example: !include ../../doc/api/v1/users/http/list-res-200.json
        role/admin-Search-for-User:
          example: !include ../../doc/api/v1/users/http/search-as-admin-res-200.json
        role/member-Search-for-User:
          example: !include ../../doc/api/v1/users/http/search-as-member-res-200.json
    401:
      body:
        role/anon:
          example: !include ../../doc/api/v1/users/http/list-res-401.json
    403:
      description: You tried to list all users as a member. Members must provide a search query.
      body:
        role/member:
          example: !include ../../doc/api/v1/users/http/list-res-403.json

/{user_id}:
  description: User entity
  get:
    is: [ protected ]
    securedBy: [ jwt: { scopes: [ ADMIN ] } ]
    description: Get the user with a given ID.
    body:
      role/admin:
        example: !include ../../doc/api/v1/users/http/view-req.json
    responses:
      200:
        body:
          role/admin:
            schema: user
            example: !include ../../doc/api/v1/users/http/view-res-200.json
      401:
        body:
          role/anon:
            example: !include ../../doc/api/v1/users/http/view-res-401.json
      403:
        body:
          role/member:
            example: !include ../../doc/api/v1/users/http/view-res-403.json
  put:
    is: [ protected, validated ]
    securedBy: [ jwt: { scopes: [ ADMIN ] } ]
    description: Update a user of a given ID.
    body:
      role/admin:
        schema: user
        example: !include ../../doc/api/v1/users/http/update-req.json
    responses:
      200:
        body:
          role/admin:
            schema: user
            example: !include ../../doc/api/v1/users/http/update-res-200.json
      401:
        body:
          role/anon:
            example: !include ../../doc/api/v1/users/http/update-res-401.json
      403:
        body:
          role/member:
            example: !include ../../doc/api/v1/users/http/update-res-403.json
      422:
        body:
          role/admin:
            example: !include ../../doc/api/v1/users/http/update-res-422.json

  delete:
    is: [ protected ]
    securedBy: [ jwt: { scopes: [ ROOT ] } ]
    description: |
      Delete a user of a given ID.

      Note that deleting users is only supported for tests. Thus, the user
      must assign itself the `mocha` role first.
    responses:
      401:
        body:
          role/anon:
            example: !include ../../doc/api/v1/users/http/del-res-401.json
      403:
        body:
          role/member:
            example: !include ../../doc/api/v1/users/http/del-res-403.json

  /star: !include ../../doc/api/v1/users/star.raml
  /events:
    get:
      is: [ protected, paginated: { defaultPerPage: 10, maxPerPage: 50 }, eventlog ]
      securedBy: [ jwt: { scopes: [ ADMIN ] } ]
      description: Retrieves all events related to the user.

  /send-confirmation:
    post:
      is: [ protected ]
      securedBy: [ jwt: { scopes: [ ADMIN ] } ]
      description: |
        Resets the confirmation token and expiration date and resends the confirmation mail.

        Useful if email was entered wrong on registration and was fixed by an admin, or if the
        confirmation link wasn't clicked within 24 hours.

        Post with empty object.