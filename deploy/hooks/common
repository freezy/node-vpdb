#!/bin/bash

################ config start ################

LD_PRELOAD=/var/www/server/production/current/node_modules/sharp/vendor/lib/libz.so
KEEP_DEPLOYMENTS=5
DEPLOY_ROOT=/var/www/server

################  config end  ################

abort() {
	echo
	echo "  $@" 1>&2
	echo
	exit 1
}

rollback_abort() {

	echo
	echo "  $@" 1>&2
	echo

	if [ ${ROLLBACK} -eq 1 ]; then
		local path=${DEPLOY_ROOT}/${DEPLOY_ENV}/$1
		echo Removing ${path}
		rm -rf ${path}
	fi
	exit 1
}

repo_get_branch() {
	if (( $# == 1 )); then
		# if first argument is set, use it as branch name
		branch=$1
	else
		# determine the branch that was pushed
		if ! [ -t 0 ]; then
		  read -a ref
		fi
		IFS='/' read -ra REF <<< "${ref[2]}"
		branch="${REF[2]}"

		# if executed manually and no argument is provided, fall back to master.
		if [ -z "$branch" ]; then
			branch="master"
		fi
	fi
	echo ${branch}
}

repo_clone() {
	local dest=${DEPLOY_ROOT}/${DEPLOY_ENV}/$1
	if [ -d "$dest" ]; then
		abort "$1 is already deployed, aborting".
	fi
	git clone ${PWD} ${dest}
	test $? -eq 0 || abort "Failed to clone ${PWD} into ${dest}"
}

repo_checkout_tag() {
	local dest=${DEPLOY_ROOT}/${DEPLOY_ENV}/$1
	cd ${dest}
	# git looks at $GIT_DIR first before checking $PWD, so let's fix that.
	unset GIT_DIR
	git checkout $1
	test $? -eq 0 || rollback_abort $1 "Failed to checkout $1, aborting."
}

repo_checkout_branch() {
	local dest=${DEPLOY_ROOT}/${DEPLOY_ENV}/$1
	cd ${dest}
	echo "Checking out branch branch ${2} at ${PWD}..."
	# git looks at $GIT_DIR first before checking $PWD, so let's fix that.
	unset GIT_DIR
	git checkout $2
	test $? -eq 0 || rollback_abort $1 "Failed to checkout branch ${2} at ${PWD}, aborting."
}

npm_install() {
	echo "Installing Node.js dependencies..."
	cd ${DEPLOY_ROOT}/${DEPLOY_ENV}/$1
	npm install --no-optional
	test $? -eq 0 || rollback_abort $1 "Failed to run npm install. Manually fix and relaunch deployment.".
}

npm_install_copy() {
	if [ -d "${DEPLOY_ROOT}/${DEPLOY_ENV}/current/node_modules" ]; then
		echo "Copying node_modules from current deployment..."
		cp -ar ${DEPLOY_ROOT}/${DEPLOY_ENV}/current/node_modules ${DEPLOY_ROOT}/${DEPLOY_ENV}/$1/
	fi
	echo "Installing remaining dependencies..."
	cd ${DEPLOY_ROOT}/${DEPLOY_ENV}/$1
	npm install --no-optional
	test $? -eq 0 || rollback_abort $1 "Failed to run npm install. Manually fix and relaunch deployment.".
}

build() {
	echo "Compiling into ${DEPLOY_ROOT}/${DEPLOY_ENV}/$1/build..."
	cd ${DEPLOY_ROOT}/${DEPLOY_ENV}/$1
	npm run build
	test $? -eq 0 || rollback_abort $1 "Failed to build. Manually fix and relaunch deployment.".

	echo "Copying email templates to build folder..."
	cd src/app
	find . -name "*.handlebars" | cpio -pdm ../../build/app
	test $? -eq 0 || rollback_abort $1 "Failed to copy. Manually fix and relaunch deployment.".
}

repo_link() {
	local dest=${DEPLOY_ROOT}/${DEPLOY_ENV}/$1
	local newSettings=${DEPLOY_ROOT}/${DEPLOY_ENV}/config/${1}.js
	local currentSettings=${DEPLOY_ROOT}/${DEPLOY_ENV}/settings.js
	cd ${dest}

	if [ ! -f "$newSettings" ]; then
		echo Copying settings...
		cp ${currentSettings} ${newSettings}
		test $? -eq 0 || rollback_abort $1 "Unable to copy settings from ${currentSettings} to ${newSettings}. Please fix and manually relaunch deployment."
	else
		echo "Settings file already found at ${newSettings}"
	fi

	echo Validating settings...
	APP_SETTINGS=${newSettings} node build/scripts/validate-settings.js
	test $? -eq 0 || rollback_abort $1 "Setting validation failed. Please fix settings at ${patchedSettings} and manually finish deployment."

	echo Swapping settings...
	ln -sfn ${newSettings} ${currentSettings}
	test $? -eq 0 || rollback_abort $1 "Error linking new settings. Please fix and manually finish deployment."

	echo Running migration scripts...
	cd ${dest}
	APP_SETTINGS=${currentSettings} APP_NAME=${DEPLOY_ENV} NODE_ENV=production node build/scripts/migrate.js --from=${DEPLOY_ROOT}/${DEPLOY_ENV}/current
	test $? -eq 0 || abort $1 "Migration failed. Fix and redeploy."

	echo Swapping code...
	ln -sfn ${dest} ${DEPLOY_ROOT}/${DEPLOY_ENV}/current
	test $? -eq 0 || abort $1 "Failed to symlink current repo."
}

repo_cleanup() {
	local regex=$1
	local dir=${DEPLOY_ROOT}/${DEPLOY_ENV}
	echo Deleting old deployments:
	(ls -t ${dir}|egrep ${regex}|head -n ${KEEP_DEPLOYMENTS};ls ${dir}|egrep ${regex})|sort|uniq -u|xargs -I {} echo "   * ${dir}/{}"
	(ls -t ${dir}|egrep ${regex}|head -n ${KEEP_DEPLOYMENTS};ls ${dir}|egrep ${regex})|sort|uniq -u|xargs -I {} rm ${dir}/{} -r
}

repo_last_tag() {
	ref=`git for-each-ref refs/tags --sort=-*authordate --format='%(refname)' --count=1 | cut -d '/' -f 3`
	test $? -eq 0 || abort "Failed to determine latest tag"
	echo ${ref}
}

node_cluster_reload() {
	echo Deploying new code...
	pm2 reload ${DEPLOY_ENV}
	test $? -eq 0 || abort "Failed to trigger PM2 reload."
}
